// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lesson.proto

/*
Package blog is a generated protocol buffer package.

It is generated from these files:
	lesson.proto

It has these top-level messages:
	Lesson
	Content
	Query
	Paragraph
*/
package blog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Lesson struct {
	Domain  string                     `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Title   string                     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Content string                     `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Reads   int64                      `protobuf:"varint,4,opt,name=reads" json:"reads,omitempty"`
	Created *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
}

func (m *Lesson) Reset()                    { *m = Lesson{} }
func (m *Lesson) String() string            { return proto.CompactTextString(m) }
func (*Lesson) ProtoMessage()               {}
func (*Lesson) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Lesson) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Lesson) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Lesson) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Lesson) GetReads() int64 {
	if m != nil {
		return m.Reads
	}
	return 0
}

func (m *Lesson) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

type Content struct {
	Lessons []*Lesson `protobuf:"bytes,1,rep,name=lessons" json:"lessons,omitempty"`
}

func (m *Content) Reset()                    { *m = Content{} }
func (m *Content) String() string            { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()               {}
func (*Content) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Content) GetLessons() []*Lesson {
	if m != nil {
		return m.Lessons
	}
	return nil
}

type Query struct {
	Term string `protobuf:"bytes,1,opt,name=term" json:"term,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Query) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

type Paragraph struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *Paragraph) Reset()                    { *m = Paragraph{} }
func (m *Paragraph) String() string            { return proto.CompactTextString(m) }
func (*Paragraph) ProtoMessage()               {}
func (*Paragraph) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Paragraph) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*Lesson)(nil), "blog.Lesson")
	proto.RegisterType((*Content)(nil), "blog.Content")
	proto.RegisterType((*Query)(nil), "blog.Query")
	proto.RegisterType((*Paragraph)(nil), "blog.Paragraph")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Blog service

type BlogClient interface {
	Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Content, error)
	SearchAsStream(ctx context.Context, in *Query, opts ...grpc.CallOption) (Blog_SearchAsStreamClient, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (Blog_WriteClient, error)
	WriteRead(ctx context.Context, opts ...grpc.CallOption) (Blog_WriteReadClient, error)
}

type blogClient struct {
	cc *grpc.ClientConn
}

func NewBlogClient(cc *grpc.ClientConn) BlogClient {
	return &blogClient{cc}
}

func (c *blogClient) Search(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := grpc.Invoke(ctx, "/blog.Blog/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) SearchAsStream(ctx context.Context, in *Query, opts ...grpc.CallOption) (Blog_SearchAsStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Blog_serviceDesc.Streams[0], c.cc, "/blog.Blog/SearchAsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &blogSearchAsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blog_SearchAsStreamClient interface {
	Recv() (*Lesson, error)
	grpc.ClientStream
}

type blogSearchAsStreamClient struct {
	grpc.ClientStream
}

func (x *blogSearchAsStreamClient) Recv() (*Lesson, error) {
	m := new(Lesson)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blogClient) Write(ctx context.Context, opts ...grpc.CallOption) (Blog_WriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Blog_serviceDesc.Streams[1], c.cc, "/blog.Blog/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &blogWriteClient{stream}
	return x, nil
}

type Blog_WriteClient interface {
	Send(*Paragraph) error
	CloseAndRecv() (*Lesson, error)
	grpc.ClientStream
}

type blogWriteClient struct {
	grpc.ClientStream
}

func (x *blogWriteClient) Send(m *Paragraph) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blogWriteClient) CloseAndRecv() (*Lesson, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Lesson)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blogClient) WriteRead(ctx context.Context, opts ...grpc.CallOption) (Blog_WriteReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Blog_serviceDesc.Streams[2], c.cc, "/blog.Blog/WriteRead", opts...)
	if err != nil {
		return nil, err
	}
	x := &blogWriteReadClient{stream}
	return x, nil
}

type Blog_WriteReadClient interface {
	Send(*Paragraph) error
	Recv() (*Lesson, error)
	grpc.ClientStream
}

type blogWriteReadClient struct {
	grpc.ClientStream
}

func (x *blogWriteReadClient) Send(m *Paragraph) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blogWriteReadClient) Recv() (*Lesson, error) {
	m := new(Lesson)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Blog service

type BlogServer interface {
	Search(context.Context, *Query) (*Content, error)
	SearchAsStream(*Query, Blog_SearchAsStreamServer) error
	Write(Blog_WriteServer) error
	WriteRead(Blog_WriteReadServer) error
}

func RegisterBlogServer(s *grpc.Server, srv BlogServer) {
	s.RegisterService(&_Blog_serviceDesc, srv)
}

func _Blog_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).Search(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_SearchAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServer).SearchAsStream(m, &blogSearchAsStreamServer{stream})
}

type Blog_SearchAsStreamServer interface {
	Send(*Lesson) error
	grpc.ServerStream
}

type blogSearchAsStreamServer struct {
	grpc.ServerStream
}

func (x *blogSearchAsStreamServer) Send(m *Lesson) error {
	return x.ServerStream.SendMsg(m)
}

func _Blog_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlogServer).Write(&blogWriteServer{stream})
}

type Blog_WriteServer interface {
	SendAndClose(*Lesson) error
	Recv() (*Paragraph, error)
	grpc.ServerStream
}

type blogWriteServer struct {
	grpc.ServerStream
}

func (x *blogWriteServer) SendAndClose(m *Lesson) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blogWriteServer) Recv() (*Paragraph, error) {
	m := new(Paragraph)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Blog_WriteRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlogServer).WriteRead(&blogWriteReadServer{stream})
}

type Blog_WriteReadServer interface {
	Send(*Lesson) error
	Recv() (*Paragraph, error)
	grpc.ServerStream
}

type blogWriteReadServer struct {
	grpc.ServerStream
}

func (x *blogWriteReadServer) Send(m *Lesson) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blogWriteReadServer) Recv() (*Paragraph, error) {
	m := new(Paragraph)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Blog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blog.Blog",
	HandlerType: (*BlogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Blog_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchAsStream",
			Handler:       _Blog_SearchAsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Write",
			Handler:       _Blog_Write_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WriteRead",
			Handler:       _Blog_WriteRead_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "lesson.proto",
}

func init() { proto.RegisterFile("lesson.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcf, 0x4e, 0x83, 0x40,
	0x10, 0xc6, 0xbb, 0x96, 0x3f, 0xe9, 0xb4, 0x6a, 0x32, 0x31, 0x66, 0x53, 0x0f, 0x12, 0x12, 0x1b,
	0xe2, 0x81, 0xd6, 0xea, 0x0b, 0xa8, 0x57, 0x0f, 0x4a, 0x4d, 0x3c, 0x6f, 0xcb, 0x48, 0x49, 0x80,
	0x6d, 0x76, 0xb7, 0x07, 0xdf, 0xc5, 0x57, 0xf1, 0xdd, 0x4c, 0x77, 0xc1, 0x88, 0x27, 0x6f, 0x7c,
	0x33, 0x3f, 0x86, 0xdf, 0x07, 0x4c, 0x2a, 0xd2, 0x5a, 0x36, 0xe9, 0x4e, 0x49, 0x23, 0xd1, 0x5b,
	0x57, 0xb2, 0x98, 0x5e, 0x16, 0x52, 0x16, 0x15, 0xcd, 0xed, 0x6c, 0xbd, 0x7f, 0x9f, 0x9b, 0xb2,
	0x26, 0x6d, 0x44, 0xbd, 0x73, 0x58, 0xfc, 0xc9, 0x20, 0x78, 0xb2, 0xef, 0xe1, 0x39, 0x04, 0xb9,
	0xac, 0x45, 0xd9, 0x70, 0x16, 0xb1, 0x64, 0x94, 0xb5, 0x09, 0xcf, 0xc0, 0x37, 0xa5, 0xa9, 0x88,
	0x1f, 0xd9, 0xb1, 0x0b, 0xc8, 0x21, 0xdc, 0xc8, 0xc6, 0x50, 0x63, 0xf8, 0xd0, 0xce, 0xbb, 0x78,
	0xe0, 0x15, 0x89, 0x5c, 0x73, 0x2f, 0x62, 0xc9, 0x30, 0x73, 0x01, 0xef, 0x20, 0xdc, 0x28, 0x12,
	0x86, 0x72, 0xee, 0x47, 0x2c, 0x19, 0x2f, 0xa7, 0xa9, 0x73, 0x4b, 0x3b, 0xb7, 0xf4, 0xb5, 0x73,
	0xcb, 0x3a, 0x34, 0xbe, 0x81, 0xf0, 0xb1, 0x3d, 0x3b, 0x83, 0xd0, 0x15, 0xd4, 0x9c, 0x45, 0xc3,
	0x64, 0xbc, 0x9c, 0xa4, 0x87, 0x8a, 0xa9, 0xb3, 0xcf, 0xba, 0x65, 0x7c, 0x01, 0xfe, 0xcb, 0x9e,
	0xd4, 0x07, 0x22, 0x78, 0x86, 0x54, 0xdd, 0xb6, 0xb1, 0xcf, 0xf1, 0x15, 0x8c, 0x9e, 0x85, 0x12,
	0x85, 0x12, 0xbb, 0xed, 0xef, 0x0a, 0xac, 0x57, 0x61, 0xf9, 0xc5, 0xc0, 0x7b, 0xa8, 0x64, 0x81,
	0x33, 0x08, 0x56, 0x24, 0xd4, 0x66, 0x8b, 0x63, 0xf7, 0x35, 0x7b, 0x7a, 0x7a, 0xec, 0x42, 0xab,
	0x16, 0x0f, 0x70, 0x0e, 0x27, 0x8e, 0xbb, 0xd7, 0x2b, 0xa3, 0x48, 0xd4, 0x7d, 0xbe, 0xa7, 0x1a,
	0x0f, 0x16, 0x0c, 0xaf, 0xc1, 0x7f, 0x53, 0xa5, 0x21, 0x3c, 0x75, 0xab, 0x1f, 0xab, 0xbf, 0x6c,
	0xc2, 0x70, 0x01, 0x23, 0xcb, 0x66, 0x24, 0xf2, 0x7f, 0xf0, 0x0b, 0xb6, 0x0e, 0xec, 0x3f, 0xbd,
	0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x09, 0xc7, 0x8c, 0x13, 0x02, 0x00, 0x00,
}
